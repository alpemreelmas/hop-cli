name: Build and Release Hop CLI Installer

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows-installer:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --verbose
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Install NSIS
      run: |
        # Download and install NSIS
        $nsisUrl = "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.11/nsis-3.11-setup.exe"
        $nsisInstaller = "$env:TEMP\nsis-setup.exe"
        Invoke-WebRequest -Uri $nsisUrl -OutFile $nsisInstaller
        Start-Process -FilePath $nsisInstaller -ArgumentList "/S" -Wait
        
        # Add NSIS to PATH for this session
        $nsisPath = "${env:ProgramFiles(x86)}\NSIS"
        $env:PATH += ";$nsisPath"
        echo "$nsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Verify NSIS installation
      run: |
        makensis /VERSION
        
    - name: Create installer
      run: |
        makensis installer-simple.nsi
        
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        $version = (Get-Content Cargo.toml | Select-String 'version = "(.+)"').Matches[0].Groups[1].Value
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
    - name: Rename installer with version
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $newName = "hop-cli-installer-v$version.exe"
        Rename-Item "hop-cli-installer.exe" $newName
        echo "INSTALLER_NAME=$newName" >> $env:GITHUB_ENV
        
    - name: Test installer exists
      run: |
        if (Test-Path $env:INSTALLER_NAME) {
          Write-Host "‚úÖ Installer created: $env:INSTALLER_NAME"
          $size = (Get-Item $env:INSTALLER_NAME).Length
          Write-Host "üì¶ Size: $([math]::Round($size/1MB, 2)) MB"
        } else {
          Write-Host "‚ùå Installer not found!"
          exit 1
        }
        
    - name: Upload installer as artifact
      uses: actions/upload-artifact@v3
      with:
        name: hop-cli-installer
        path: ${{ env.INSTALLER_NAME }}
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.INSTALLER_NAME }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          # Hop CLI v${{ steps.get_version.outputs.version }}
          
          ## üöÄ Installation
          
          **Windows Users:**
          1. Download `${{ env.INSTALLER_NAME }}`
          2. Run as Administrator
          3. Follow the installation wizard
          4. Open a new Command Prompt and run `hop --help`
          
          **Other Installation Methods:**
          - Cargo: `cargo install --git https://github.com/${{ github.repository }}`
          - Manual: Download and extract the binary
          
          ## ‚ú® Features
          - Add, list, and manage SSH servers
          - Connect to servers via SSH
          - Copy files with SCP
          - Execute remote commands
          - Import/export server configurations
          
          ## üîß What's New
          See the commit history for detailed changes.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build for other platforms
  build-cross-platform:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Package binary
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv target/${{ matrix.target }}/release/hop.exe hop-${{ matrix.target }}.exe
        else
          mv target/${{ matrix.target }}/release/hop hop-${{ matrix.target }}
        fi
        
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: hop-cli-${{ matrix.target }}
        path: hop-${{ matrix.target }}${{ matrix.suffix }} 